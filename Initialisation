'''
Tasks:
Figure out how to load the data into python
Work out how to set the first 300 samples of every signal to be zero (to mask the electronic noise)
Perform envelope detection (Hilbert transform) of all the signals and save as a new variable.
Write a function that performs steps 2 and 3. Takes rcvData as an input, and returns envData as an output 
'''

# Data preparation and understanding code
# 1.1 Python code to prepare/understand the data
from pathlib import Path
# Importing pandas from library
import pandas as pd 

df = pd.read_cs('dataset.csv)

import scipy.io
import matplotlib.pyplot as plt
from scipy.signal import hilbert
import numpy as np

# Load the .mat file
data = scipy.io.loadmat('ultrasound_reflection_data.mat')

# Extracting the signal for the first transmitter and 141st receiver
signal_first_transmitter_141st_receiver = data['rcvData'][0, 140, :] #data['rcvData'].iloc[[0, 140], :]

# Compute the analytic signal using the Hilbert transform
analytic_signal = hilbert(signal_first_transmitter_141st_receiver)

rcvData = data['rcvData']
nTx = rcvData.shape[0]
nRx = rcvData.shape[1]
nt = rcvData.shape[2]

plt.figure(figsize=(10, 6))
envelope_data = np.zeros((nTx,nRx,nt))
for Tx in range(nTx):
    for Rx in range(nRx):
        #signal = signal_first_transmitter_141st_receiver #extract data for every time in the loop where 0 is replaced with ntx and the 140 with nrx
        # print(Tx, Rx)
        signal = rcvData[Tx, Rx, :]
        # print (signal.size)
        total_sum = np.sum(signal)
        # print (total_sum)
        analytic_signal = hilbert(signal)
        envelope = abs(analytic_signal)
        # Plotting the original signal and its envelope
        # plt.plot(signal, label='Original Signal', color='blue')
        # plt.plot(envelope, label='Envelope', color='red', linestyle='--')
        # plt.title('Signal and Envelope for Transmitter 1 and Receiver 141')
        # plt.xlabel('Time Samples')
        # plt.ylabel('Amplitude')
        # plt.legend()
        # plt.grid(True)
        # plt.show()
# envelope_data = np.zeros(nTx,nRx,nt)
        envelope_data[Tx,Rx,:] = envelope
print (envelope_data.size)
    
# # Define the range for zoom-in
# start_sample = 1750
# end_sample = 2100

# # Plotting the zoomed-in section of the original signal and its envelope
# plt.figure(figsize=(10, 6))
# plt.plot(range(start_sample, end_sample), 
#          signal_first_transmitter_141st_receiver[start_sample:end_sample], 
#          label='Original Signal', color='blue')
# plt.plot(range(start_sample, end_sample), 
#          envelope[start_sample:end_sample], 
#          label='Envelope', color='red', linestyle='--')
# plt.title('Zoomed-in Signal and Envelope (Samples 1750 to 2100)')
# plt.xlabel('Time Samples')
# plt.ylabel('Amplitude')
# plt.legend()
# plt.grid(True)
# plt.tight_layout()
# plt.show()
